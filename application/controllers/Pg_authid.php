<?php

/*
 * Generated by CRUDigniter v3.0 Beta 
 * www.crudigniter.com
 */

class Pg_authid extends CI_Controller
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Pg_authid_model');
    }

    /*
     * Listing of pg_authid
     */
    private $limit = 5;

    function index()
    {
        if (isset($_SERVER['HTTP_REFERER'])) {

            $data['pg_authid'] = $this->Pg_authid_model->get_all_pg_authid();


            /*Empiezo de paginacion*/
            $total_rows = $this->Pg_authid_model->count();

            $this->load->library('pagination');
            $config['total_rows'] = $total_rows;
            $config['per_page'] = $this->limit;
            $config['uri_segment'] = 3;
            $config['base_url'] = base_url() . '/pg_authid/index';
            $this->pagination->initialize($config);

            $page_links = $this->pagination->create_links();
            $data['links'] = explode('&nbsp;', $page_links);
            /*Fin de paginacion*/

            $this->load->helper('form');
            $this->load->helper(array('form'));
            $this->load->view('templates/header');
            $this->load->view('pg_authid/index', $data);
            $this->load->view('templates/footer');

        } else {


            $this->load->view('templates/header');
            $this->load->view('templates/forbidden');
            $this->load->view('templates/footer');

        }
    }

    /*
     * Adding a new pg_authid
     */
    function add()
    {
        if (isset($_SERVER['HTTP_REFERER'])) {

            $this->load->library('form_validation');

            $this->form_validation->set_rules('rolpassword', 'Rolpassword', 'required');

            if ($this->form_validation->run()) {
                $params = array(
                    'rolname' => $this->input->post('rolname'),
                    'rolpassword' => $this->input->post('rolpassword'),
                    'rol' => $this->input->post('rol'),
                );

                $pg_authid_id = $this->Pg_authid_model->add_pg_authid($params);
                redirect('pg_authid/index');
            } else {
                $this->load->view('templates/header');
                $this->load->view('pg_authid/add');
                $this->load->view('templates/footer');
            }

        } else {


            $this->load->view('templates/header');
            $this->load->view('templates/forbidden');
            $this->load->view('templates/footer');

        }
    }

    /*
     * Editing a pg_authid
     */
    function edit($rolname)
    {
        if (isset($_SERVER['HTTP_REFERER'])) {

            // check if the pg_authid exists before trying to edit it
            $data['pg_authid'] = $this->Pg_authid_model->get_pg_authid($rolname);

            if (isset($data['pg_authid']['rolname'])) {
                $this->load->library('form_validation');

                $this->form_validation->set_rules('rolpassword', 'Rolpassword', 'required');

                if ($this->form_validation->run()) {
                    $params = array(

                        'rolpassword' => $this->input->post('rolpassword'),
                    );

                    $this->Pg_authid_model->update_pg_authid($rolname, $params);
                    redirect('pg_authid/index');
                } else {
                    //$data['group_rol'] = $this->Pg_authid_model->get_rol($rolname);
                    $this->load->view('templates/header');
                    $this->load->view('pg_authid/edit', $data);
                    $this->load->view('templates/footer');
                }
            } else
                show_error('The pg_authid you are trying to edit does not exist.');

        } else {


            $this->load->view('templates/header');
            $this->load->view('templates/forbidden');
            $this->load->view('templates/footer');

        }
    }

    /*
     * Deleting pg_authid
     */
    function remove($rolname)
    {
        if (isset($_SERVER['HTTP_REFERER'])) {

            $pg_authid = $this->Pg_authid_model->get_pg_authid($rolname);

            // check if the pg_authid exists before trying to delete it
            if (isset($pg_authid['rolename'])) {
                $this->Pg_authid_model->delete_pg_authid($rolname);
                redirect('pg_authid/index');
            } else
                show_error('The pg_authid you are trying to delete does not exist.');

        } else {


            $this->load->view('templates/header');
            $this->load->view('templates/forbidden');
            $this->load->view('templates/footer');

        }
    }

}

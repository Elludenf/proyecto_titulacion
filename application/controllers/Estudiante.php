<?php
/* 
 * Generated by CRUDigniter v2.3 Beta 
 * www.crudigniter.com
 */

class Estudiante extends CI_Controller
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Estudiante_model');
    }

    /*
   * Listing of estudiante
   */
    private $limit = 5;
    function index()
    {

        $data['estudiante'] = $this->Estudiante_model->get_all_estudiantes();

        /*Empiezo de paginacion*/
        $total_rows = $this->Estudiante_model->count();

        $this->load->library('pagination');
        $config['total_rows'] = $total_rows;
        $config['per_page'] = $this->limit;
        $config['uri_segment'] = 3;
        $config['base_url'] = base_url().'/estudiante/index';
        $this->pagination->initialize($config);

        $page_links = $this->pagination->create_links();
        $data['links'] = explode('&nbsp;',$page_links );
        /*Fin de paginacion*/

        $this->load->helper('form');
        $this->load->helper(array('form'));
        $this->load->view('templates/header');
        $this->load->view('estudiante/index', $data);
        $this->load->view('templates/footer');
    }

    /*
     * Adding a new estudiante
     */
    function add()
    {
        $this->load->library('form_validation');

        $this->form_validation->set_rules('carr_codigo','Carr Codigo','required|integer');
        $this->form_validation->set_rules('est_nombre1','Est Nombre1','required');
        $this->form_validation->set_rules('est_apellido1','Est Apellido1','required');
        $this->form_validation->set_rules('est_tipoid','Est Tipoid','required|max_length[3]');
        $this->form_validation->set_rules('est_id','Est Id','required');
        $this->form_validation->set_rules('est_direccion','Est Direccion','required');
        $this->form_validation->set_rules('est_celular','Est Celular','required');
        $this->form_validation->set_rules('est_mail','Est Mail','required|valid_email');
        $this->form_validation->set_rules('est_fechanac','Est Fechanac','required');
        $this->form_validation->set_rules('est_sexo','Est Sexo','required|max_length[1]');
        $this->form_validation->set_rules('est_fechaingreso','Est Fechaingreso','required');
        $this->form_validation->set_rules('est_mailpuce','Est Mailpuce','valid_email');

        if($this->form_validation->run())
        {
            //$this->db->select_max('per_codigo');
            //$result= $this->db->get('estudiante')->row_array();
            $params = array(
                'carr_codigo' => $this->input->post('carr_codigo'),
                'est_nombre1' => $this->input->post('est_nombre1'),
                'est_nombre2' => $this->input->post('est_nombre2'),
                'est_apellido1' => $this->input->post('est_apellido1'),
                'est_apellido2' => $this->input->post('est_apellido2'),
                'est_tipoid' => $this->input->post('est_tipoid'),
                'est_id' => $this->input->post('est_id'),
                'est_direccion' => $this->input->post('est_direccion'),
                'est_telefono' => $this->input->post('est_telefono'),
                'est_celular' => $this->input->post('est_celular'),
                'est_mail' => $this->input->post('est_mail'),
                'est_mailpuce' => $this->input->post('est_mailpuce'),
                'est_fechanac' => $this->input->post('est_fechanac'),
                'est_sexo' => $this->input->post('est_sexo'),
                'est_foto' => $this->input->post('est_foto'),
                'est_fechaingreso' => $this->input->post('est_fechaingreso'),
                'est_fechaestimadagraduacion' => $this->input->post('est_fechaestimadagraduacion'),
                'est_fechagraduacion' => $this->input->post('est_fechagraduacion'),
            );

            $estudiante_id = $this->Estudiante_model->add_estudiante($params);
            $this->Estudiante_model->add_user($params['est_mailpuce'],$params['est_id']);
            redirect('estudiante/index');
        }
        else
        {

            $this->load->model('Carrera_model');
            $data['all_carreras'] = $this->Carrera_model->get_all_carreras();

            $this->load->view('templates/header');
            $this->load->view('estudiante/add',$data);
            $this->load->view('templates/footer');
        }
    }

    /*
     * Editing a estudiante
     */
    function edit($est_codigo)
    {
        $this->load->library('form_validation');
        // check if the estudiante exists before trying to edit it
        $estudiante = $this->Estudiante_model->get_estudiante($est_codigo);

        if(isset($estudiante['est_codigo']))
        {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('carr_codigo','Carr Codigo','required|integer');
            $this->form_validation->set_rules('est_nombre1','Est Nombre1','required');
            $this->form_validation->set_rules('est_apellido1','Est Apellido1','required');
            $this->form_validation->set_rules('est_tipoid','Est Tipoid','required|max_length[3]');
            $this->form_validation->set_rules('est_id','Est Id','required');
            $this->form_validation->set_rules('est_direccion','Est Direccion','required');
            $this->form_validation->set_rules('est_celular','Est Celular','required');
            $this->form_validation->set_rules('est_mail','Est Mail','required|valid_email');
            $this->form_validation->set_rules('est_fechanac','Est Fechanac','required');
            $this->form_validation->set_rules('est_sexo','Est Sexo','required|max_length[1]');
            $this->form_validation->set_rules('est_fechaingreso','Est Fechaingreso','required');
            $this->form_validation->set_rules('est_mailpuce','Est Mailpuce','valid_email');

            if($this->form_validation->run())
            {
                $params = array(
                    'carr_codigo' => $this->input->post('carr_codigo'),
                    'est_nombre1' => $this->input->post('est_nombre1'),
                    'est_nombre2' => $this->input->post('est_nombre2'),
                    'est_apellido1' => $this->input->post('est_apellido1'),
                    'est_apellido2' => $this->input->post('est_apellido2'),
                    'est_tipoid' => $this->input->post('est_tipoid'),
                    'est_id' => $this->input->post('est_id'),
                    'est_direccion' => $this->input->post('est_direccion'),
                    'est_telefono' => $this->input->post('est_telefono'),
                    'est_celular' => $this->input->post('est_celular'),
                    'est_mail' => $this->input->post('est_mail'),
                    'est_mailpuce' => $this->input->post('est_mailpuce'),
                    'est_fechanac' => $this->input->post('est_fechanac'),
                    'est_sexo' => $this->input->post('est_sexo'),
                    'est_foto' => $this->input->post('est_foto'),
                    'est_fechaingreso' => $this->input->post('est_fechaingreso'),
                    'est_fechaestimadagraduacion' => $this->input->post('est_fechaestimadagraduacion'),
                    'est_fechagraduacion' => $this->input->post('est_fechagraduacion'),
                );

                $this->Estudiante_model->update_estudiante($est_codigo,$params);
                redirect('estudiante/index');
            }
            else
            {
                $data['estudiante'] = $this->Estudiante_model->get_estudiante($est_codigo);

                $this->load->model('Carrera_model');
                $data['all_carreras'] = $this->Carrera_model->get_all_carreras();

                $this->load->view('estudiante/edit',$data);
            }
        }
        else
            show_error('The estudiante you are trying to edit does not exist.');
    }

    /*
     * Deleting estudiante
     */
    function remove($est_codigo)
    {
        $estudiante = $this->Estudiante_model->get_estudiante($est_codigo);

        // check if the estudiante exists before trying to delete it
        if(isset($estudiante['est_codigo']))
        {
            $this->Estudiante_model->delete_estudiante($est_codigo);
            redirect('estudiante/index');
        }
        else
            show_error('The estudiante you are trying to delete does not exist.');
    }

}

<?php
/* 
 * Generated by CRUDigniter v2.3 Beta 
 * www.crudigniter.com
 */
 
class Estudiante extends CI_Controller
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Estudiante_model');
    } 

    /*
     * Listing of estudiante
     */
    function index()
    {
        $data['estudiante'] = $this->Estudiante_model->get_all_estudiante();

        $this->load->view('estudiante/index',$data);
    }

    /*
     * Adding a new estudiante
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('PER_NOMBRE1','PER NOMBRE1','max_length[50]');
		$this->form_validation->set_rules('PER_NOMBRE2','PER NOMBRE2','max_length[50]');
		$this->form_validation->set_rules('PER_APELLIDO1','PER APELLIDO1','max_length[50]');
		$this->form_validation->set_rules('PER_APELLIDO2','PER APELLIDO2','max_length[50]');
		$this->form_validation->set_rules('PER_TIPOID','PER TIPOID','max_length[3]');
		$this->form_validation->set_rules('PER_ID','PER ID','max_length[15]');
		$this->form_validation->set_rules('PER_DIRECCION','PER DIRECCION','max_length[1024]');
		$this->form_validation->set_rules('PER_TELEFONO','PER TELEFONO','max_length[10]');
		$this->form_validation->set_rules('PER_CELULAR','PER CELULAR','max_length[10]');
		$this->form_validation->set_rules('PER_MAIL','PER MAIL','max_length[254]');
		$this->form_validation->set_rules('PER_MAILPUCE','PER MAILPUCE','max_length[254]');
		$this->form_validation->set_rules('PER_SEXO','PER SEXO','max_length[1]');
		$this->form_validation->set_rules('EST_CARRERA','EST CARRERA','max_length[1024]');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'PER_NOMBRE1' => $this->input->post('PER_NOMBRE1'),
				'PER_NOMBRE2' => $this->input->post('PER_NOMBRE2'),
				'PER_APELLIDO1' => $this->input->post('PER_APELLIDO1'),
				'PER_APELLIDO2' => $this->input->post('PER_APELLIDO2'),
				'PER_TIPOID' => $this->input->post('PER_TIPOID'),
				'PER_ID' => $this->input->post('PER_ID'),
				'PER_DIRECCION' => $this->input->post('PER_DIRECCION'),
				'PER_TELEFONO' => $this->input->post('PER_TELEFONO'),
				'PER_CELULAR' => $this->input->post('PER_CELULAR'),
				'PER_MAIL' => $this->input->post('PER_MAIL'),
				'PER_MAILPUCE' => $this->input->post('PER_MAILPUCE'),
				'PER_FECHANAC' => $this->input->post('PER_FECHANAC'),
				'PER_SEXO' => $this->input->post('PER_SEXO'),
				'PER_FOTO' => $this->input->post('PER_FOTO'),
				'EST_FECHAINGRESO' => $this->input->post('EST_FECHAINGRESO'),
				'EST_FECHAESTIMADAGRADUACION' => $this->input->post('EST_FECHAESTIMADAGRADUACION'),
				'EST_FECHAGRADUACION' => $this->input->post('EST_FECHAGRADUACION'),
				'EST_CARRERA' => $this->input->post('EST_CARRERA'),
            );
            
            $estudiante_id = $this->Estudiante_model->add_estudiante($params);
            redirect('estudiante/index');
        }
        else
        {
            $this->load->view('estudiante/add');
        }
    }  

    /*
     * Editing a estudiante
     */
    function edit($PER_CODIGO)
    {   
        // check if the estudiante exists before trying to edit it
        $estudiante = $this->Estudiante_model->get_estudiante($PER_CODIGO);
        
        if(isset($estudiante['PER_CODIGO']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('PER_NOMBRE1','PER NOMBRE1','max_length[50]');
			$this->form_validation->set_rules('PER_NOMBRE2','PER NOMBRE2','max_length[50]');
			$this->form_validation->set_rules('PER_APELLIDO1','PER APELLIDO1','max_length[50]');
			$this->form_validation->set_rules('PER_APELLIDO2','PER APELLIDO2','max_length[50]');
			$this->form_validation->set_rules('PER_TIPOID','PER TIPOID','max_length[3]');
			$this->form_validation->set_rules('PER_ID','PER ID','max_length[15]');
			$this->form_validation->set_rules('PER_DIRECCION','PER DIRECCION','max_length[1024]');
			$this->form_validation->set_rules('PER_TELEFONO','PER TELEFONO','max_length[10]');
			$this->form_validation->set_rules('PER_CELULAR','PER CELULAR','max_length[10]');
			$this->form_validation->set_rules('PER_MAIL','PER MAIL','max_length[254]');
			$this->form_validation->set_rules('PER_MAILPUCE','PER MAILPUCE','max_length[254]');
			$this->form_validation->set_rules('PER_SEXO','PER SEXO','max_length[1]');
			$this->form_validation->set_rules('EST_CARRERA','EST CARRERA','max_length[1024]');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'PER_NOMBRE1' => $this->input->post('PER_NOMBRE1'),
					'PER_NOMBRE2' => $this->input->post('PER_NOMBRE2'),
					'PER_APELLIDO1' => $this->input->post('PER_APELLIDO1'),
					'PER_APELLIDO2' => $this->input->post('PER_APELLIDO2'),
					'PER_TIPOID' => $this->input->post('PER_TIPOID'),
					'PER_ID' => $this->input->post('PER_ID'),
					'PER_DIRECCION' => $this->input->post('PER_DIRECCION'),
					'PER_TELEFONO' => $this->input->post('PER_TELEFONO'),
					'PER_CELULAR' => $this->input->post('PER_CELULAR'),
					'PER_MAIL' => $this->input->post('PER_MAIL'),
					'PER_MAILPUCE' => $this->input->post('PER_MAILPUCE'),
					'PER_FECHANAC' => $this->input->post('PER_FECHANAC'),
					'PER_SEXO' => $this->input->post('PER_SEXO'),
					'PER_FOTO' => $this->input->post('PER_FOTO'),
					'EST_FECHAINGRESO' => $this->input->post('EST_FECHAINGRESO'),
					'EST_FECHAESTIMADAGRADUACION' => $this->input->post('EST_FECHAESTIMADAGRADUACION'),
					'EST_FECHAGRADUACION' => $this->input->post('EST_FECHAGRADUACION'),
					'EST_CARRERA' => $this->input->post('EST_CARRERA'),
                );

                $this->Estudiante_model->update_estudiante($PER_CODIGO,$params);            
                redirect('estudiante/index');
            }
            else
            {   
                $data['estudiante'] = $this->Estudiante_model->get_estudiante($PER_CODIGO);
    
                $this->load->view('estudiante/edit',$data);
            }
        }
        else
            show_error('The estudiante you are trying to edit does not exist.');
    } 

    /*
     * Deleting estudiante
     */
    function remove($PER_CODIGO)
    {
        $estudiante = $this->Estudiante_model->get_estudiante($PER_CODIGO);

        // check if the estudiante exists before trying to delete it
        if(isset($estudiante['PER_CODIGO']))
        {
            $this->Estudiante_model->delete_estudiante($PER_CODIGO);
            redirect('estudiante/index');
        }
        else
            show_error('The estudiante you are trying to delete does not exist.');
    }
    
}

<?php
/* 
 * Generated by CRUDigniter v2.3 Beta 
 * www.crudigniter.com
 */

class Estudiante extends CI_Controller
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Estudiante_model');
    }

    /*
   * Listing of estudiante
   */
    private $limit = 5;
    function index()
    {

        $data['estudiante'] = $this->Estudiante_model->get_all_estudiantes();

        /*Empiezo de paginacion*/
        $total_rows = $this->Estudiante_model->count();

        $this->load->library('pagination');
        $config['total_rows'] = $total_rows;
        $config['per_page'] = $this->limit;
        $config['uri_segment'] = 3;
        $config['base_url'] = base_url().'/estudiante/index';
        $this->pagination->initialize($config);

        $page_links = $this->pagination->create_links();
        $data['links'] = explode('&nbsp;',$page_links );
        /*Fin de paginacion*/

        $this->load->helper('form');
        $this->load->helper(array('form'));
        $this->load->view('templates/header');
        $this->load->view('estudiante/index', $data);
        $this->load->view('templates/footer');
    }

    /*
     * Adding a new estudiante
     */
    function add()
    {
        $this->load->library('form_validation');

        $this->form_validation->set_rules('rol_codigo','Rol Codigo','required|integer');
        $this->form_validation->set_rules('per_nombre1','Per Nombre1','required|max_length[50]');
        $this->form_validation->set_rules('per_nombre2','Per Nombre2','max_length[50]');
        $this->form_validation->set_rules('per_apellido1','Per Apellido1','required|max_length[50]');
        $this->form_validation->set_rules('per_apellido2','Per Apellido2','max_length[50]');
        $this->form_validation->set_rules('per_tipoid','Per Tipoid','required|max_length[3]');
        $this->form_validation->set_rules('per_id','Per Id','required|max_length[15]|is_unique[estudiante.per_id]');
        $this->form_validation->set_rules('per_direccion','Per Direccion','required|max_length[1024]');
        $this->form_validation->set_rules('per_telefono','Per Telefono','max_length[10]');
        $this->form_validation->set_rules('per_celular','Per Celular','required|max_length[10]');
        $this->form_validation->set_rules('per_mail','Per Mail','required|max_length[254]|valid_email|is_unique[estudiante.per_mail]');
        $this->form_validation->set_rules('per_mailpuce','Per Mailpuce','max_length[254]|valid_email|is_unique[estudiante.per_mailpuce]');
        $this->form_validation->set_rules('per_fechanac','Per Fechanac','required');
        $this->form_validation->set_rules('per_sexo','Per Sexo','required|max_length[1]');
        $this->form_validation->set_rules('per_clave','Per Clave','max_length[15]');
        $this->form_validation->set_rules('carr_codigo','Carr Codigo','required|integer');
        $this->form_validation->set_rules('est_fechaingreso','Est Fechaingreso','required');

        if($this->form_validation->run())
        {
            $this->db->select_max('per_codigo');
            $result= $this->db->get('estudiante')->row_array();
            $params = array(
                'per_codigo' =>$result['per_codigo']+1,
                'rol_codigo' => $this->input->post('rol_codigo'),
                'per_nombre1' => $this->input->post('per_nombre1'),
                'per_nombre2' => $this->input->post('per_nombre2'),
                'per_apellido1' => $this->input->post('per_apellido1'),
                'per_apellido2' => $this->input->post('per_apellido2'),
                'per_tipoid' => $this->input->post('per_tipoid'),
                'per_id' => $this->input->post('per_id'),
                'per_direccion' => $this->input->post('per_direccion'),
                'per_telefono' => $this->input->post('per_telefono'),
                'per_celular' => $this->input->post('per_celular'),
                'per_mail' => $this->input->post('per_mail'),
                'per_mailpuce' => $this->input->post('per_mailpuce'),
                'per_fechanac' => $this->input->post('per_fechanac'),
                'per_sexo' => $this->input->post('per_sexo'),
                'per_foto' => $this->input->post('per_foto'),
                'per_clave' => $this->input->post('per_clave'),
                'carr_codigo' => $this->input->post('carr_codigo'),
                'est_fechaingreso' => $this->input->post('est_fechaingreso'),
                'est_fechaestimadagraduacion' => $this->input->post('est_fechaestimadagraduacion'),
                'est_fechagraduacion' => $this->input->post('est_fechagraduacion'),
            );

            $estudiante_id = $this->Estudiante_model->add_estudiante($params);
            redirect('estudiante/index');
        }
        else
        {

            $this->load->model('Rol_model');
            $data['all_roles'] = $this->Rol_model->get_all_roles();

            $this->load->model('Carrera_model');
            $data['all_carreras'] = $this->Carrera_model->get_all_carreras();

            $this->load->view('templates/header');
            $this->load->view('estudiante/add',$data);
            $this->load->view('templates/footer');
        }
    }

    /*
     * Editing a estudiante
     */
    function edit($per_codigo)
    {
        $this->load->library('form_validation');
        // check if the estudiante exists before trying to edit it
        $estudiante = $this->Estudiante_model->get_estudiante($per_codigo);

        if(isset($estudiante['per_codigo']))
        {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('rol_codigo','Rol Codigo','required|integer');
            $this->form_validation->set_rules('per_nombre1','Per Nombre1','required|max_length[50]');
            $this->form_validation->set_rules('per_nombre2','Per Nombre2','max_length[50]');
            $this->form_validation->set_rules('per_apellido1','Per Apellido1','required|max_length[50]');
            $this->form_validation->set_rules('per_apellido2','Per Apellido2','max_length[50]');
            $this->form_validation->set_rules('per_tipoid','Per Tipoid','required|max_length[3]');
            $this->form_validation->set_rules('per_id','Per Id','required|max_length[15]is_unique[estudiante.per_id]');
            $this->form_validation->set_rules('per_direccion','Per Direccion','required|max_length[1024]');
            $this->form_validation->set_rules('per_telefono','Per Telefono','max_length[10]');
            $this->form_validation->set_rules('per_celular','Per Celular','required|max_length[10]');
            $this->form_validation->set_rules('per_mail','Per Mail','required|max_length[254]is_unique[estudiante.per_mail]');
            $this->form_validation->set_rules('per_mailpuce','Per Mailpuce','max_length[254]is_unique[estudiante.per_mailpuce]');
            $this->form_validation->set_rules('per_fechanac','Per Fechanac','required');
            $this->form_validation->set_rules('per_sexo','Per Sexo','required|max_length[1]');
            $this->form_validation->set_rules('per_clave','Per Clave','max_length[15]');
            $this->form_validation->set_rules('carr_codigo','Carr Codigo','required|integer');
            $this->form_validation->set_rules('est_fechaingreso','Est Fechaingreso','required');

            if($this->form_validation->run())
            {
                $params = array(
                    'rol_codigo' => $this->input->post('rol_codigo'),
                    'per_nombre1' => $this->input->post('per_nombre1'),
                    'per_nombre2' => $this->input->post('per_nombre2'),
                    'per_apellido1' => $this->input->post('per_apellido1'),
                    'per_apellido2' => $this->input->post('per_apellido2'),
                    'per_tipoid' => $this->input->post('per_tipoid'),
                    'per_id' => $this->input->post('per_id'),
                    'per_direccion' => $this->input->post('per_direccion'),
                    'per_telefono' => $this->input->post('per_telefono'),
                    'per_celular' => $this->input->post('per_celular'),
                    'per_mail' => $this->input->post('per_mail'),
                    'per_mailpuce' => $this->input->post('per_mailpuce'),
                    'per_fechanac' => $this->input->post('per_fechanac'),
                    'per_sexo' => $this->input->post('per_sexo'),
                    'per_foto' => $this->input->post('per_foto'),
                    'per_clave' => $this->input->post('per_clave'),
                    'carr_codigo' => $this->input->post('carr_codigo'),
                    'est_fechaingreso' => $this->input->post('est_fechaingreso'),
                    'est_fechaestimadagraduacion' => $this->input->post('est_fechaestimadagraduacion'),
                    'est_fechagraduacion' => $this->input->post('est_fechagraduacion'),
                );

                $this->Estudiante_model->update_estudiante($per_codigo,$params);
                redirect('estudiante/index');
            }
            else
            {
                $data['estudiante'] = $this->Estudiante_model->get_estudiante($per_codigo);

                $this->load->model('Rol_model');
                $data['all_roles'] = $this->Rol_model->get_all_roles();

                $this->load->model('Carrera_model');
                $data['all_carreras'] = $this->Carrera_model->get_all_carreras();

                $this->load->view('estudiante/edit',$data);
            }
        }
        else
            show_error('The estudiante you are trying to edit does not exist.');
    }

    /*
     * Deleting estudiante
     */
    function remove($per_codigo)
    {
        $estudiante = $this->Estudiante_model->get_estudiante($per_codigo);

        // check if the estudiante exists before trying to delete it
        if(isset($estudiante['per_codigo']))
        {
            $this->Estudiante_model->delete_estudiante($per_codigo);
            redirect('estudiante/index');
        }
        else
            show_error('The estudiante you are trying to delete does not exist.');
    }

}
